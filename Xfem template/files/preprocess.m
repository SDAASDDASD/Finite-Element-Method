clc
clear all

a = 0.5 ;                     % crack length
L = 1 ;                       % model lengh
D = 2 ;                       % model height
xCr   = [0 D/2; a D/2];       % crack coordinates
xTip  = [a D/2];              % crack tip coordinates
seg   = xCr(2,:) - xCr(1,:);   % tip segment
alpha = atan2(seg(2),seg(1));  % inclination angle
QT    =[cos(alpha) sin(alpha); -sin(alpha) cos(alpha)];


%read coordinates of all nodes generated by ABAQUS
fid = fopen('m0XY.prn','r');
node = fscanf(fid,'%d,%g,%g\n',[3,inf]);
node = node';
fclose(fid);


%read element topology of all elements generated by ABAQUS
fid = fopen('m0Top.prn','r');
element = fscanf(fid,'%d,%d,%d,%d,%d\n',[5,inf]);
element = element';
fclose(fid);

numnode = size(node,1);         % number of nodes
numelem = size(element,1);      % number of elements

x0  = xCr(1,1); y0 = xCr(1,2);
x1  = xCr(2,1); y1 = xCr(2,2);
t   = 1/norm(seg)*seg;            % uni vector of crack in tangential direction
for i = 1 : numnode
    x = node(i,2);
    y = node(i,3);
    l   = sqrt((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0)) ;
    phi = (y0-y1)*x + (x1-x0)*y + (x0*y1-x1*y0);      %normal level set function
    ls(i,1) = phi/l;            % normal LS
    ls(i,2) = ([x y]-xTip)*t';  % tangent LS
end

enrich_node = zeros(numnode,1);

count1 = 0;
count2 = 0;
for iel = 1 : numelem
    sctr = element(iel,2:5);
    phi  = ls(sctr,1);
    psi  = ls(sctr,2);
    if ( max(phi)*min(phi) < 0 )
        if max(psi) < 0
            count1 = count1 + 1 ; % ah, one split element
            split_elem(count1) = iel;
            enrich_node(sctr)   = 1;
        elseif max(psi)*min(psi) < 0
            count2 = count2 + 1 ; % ah, one tip element
            tip_elem(count2) = iel;
            enrich_node(sctr)   = 2;
        end
    end
end
split_nodes = find(enrich_node == 1);
tip_nodes   = find(enrich_node == 2);


% TopType : topology type of the element
%           replace each node in element with its enrich type
%           0      not enriched
%           1      heaviside enriched
%           2      crack tip enriched
% TopXTypeX : topology type for enriched element
% TopX : element set of enriched element
% TopNoX : element set of non-enriched element
TopType = element;
TopX = [];
TopNoX = [];
TopXTypeX = [];
for iel = 1 : numelem
    sctr = element(iel,2:5);
    TopType(iel,2:5) = enrich_node(sctr,1);
    if (any(enrich_node(sctr,1)))
    TopX = [TopX;element(iel,:)];
    TopXTypeX = [TopXTypeX;TopType(iel,:)];
    else
     TopNoX = [TopNoX;element(iel,:)];
    end
end

fid = fopen('TopX','w');
fprintf(fid,'%d,%d,%d,%d,%d\n',TopX');
fclose(fid);

fid = fopen('TopNoX','w');
fprintf(fid,'%d,%d,%d,%d,%d\n',TopNoX');
fclose(fid);

fid = fopen('TopXTypeX','w');
fprintf(fid,'%d,%d,%d,%d,%d\n',TopXTypeX');
fclose(fid);


% node set below are nodes belong to enriched elemnt(heaviside enriched,crack tip enriched and partialy enriched)
% NOT only enriched nodes
% they are used in input file
% SETNodeX2dof : non-enriched node belong to enriched element
% SETNodeX4dof : heaviside enriched
% SETNodeX10dof : crack tip enriched
SETNodeX2dof = [];
SETNodeX4dof = [];
SETNodeX10dof = [];
for i =1:size(TopX,1)
    strc = TopX(i,2:5);
    for j =1:size(strc,2)
        if enrich_node(strc(j),1) == 0
            SETNodeX2dof = union(SETNodeX2dof,strc(j));
        elseif enrich_node(strc(j),1) == 1
            SETNodeX4dof = union(SETNodeX4dof,strc(j));
        elseif enrich_node(strc(j),1) == 2
            SETNodeX10dof = union(SETNodeX10dof,strc(j));
        end
    end
end

fid = fopen('SETNodeX2dof','w');
fprintf(fid,'%d,%d,%d,%d,%d,%d,%d,%d\n',SETNodeX2dof');
fclose(fid);

fid = fopen('SETNodeX4dof','w');
fprintf(fid,'%d,%d,%d,%d,%d,%d,%d,%d\n',SETNodeX4dof');
fclose(fid);

fid = fopen('SETNodeX10dof','w');
fprintf(fid,'%d,%d,%d,%d,%d,%d,%d,%d\n',SETNodeX10dof');
fclose(fid);


ncrack = 1;       % number of cracks
maxCP = 2;        % max crack path points of every crack
nelemX = size(TopX,1);   % number of enriched elements
% number of nodes belonged to enriched element
nnodeX = size(SETNodeX2dof,2)+size(SETNodeX4dof,2)+size(SETNodeX10dof,2); 
fid = fopen('GGInfoX','w');
fprintf(fid,'%d,%d,%d,%d',ncrack,maxCP,nelemX,nnodeX);
fclose(fid);


% characterize the cracks
fid = fopen('GGXYC','w');
fprintf(fid,'%d\n',maxCP);
fprintf(fid,'%g,%g\n',x0,y0);
fprintf(fid,'%g,%g\n',x1,y1);
fclose(fid);


% EnodeX : node set of nodes belonged to enriched element
% GGnodeX : column 1      node number
%           column 2      enrich type
%           column 3      value of normal Level set function
%           column 4      value of tangent Level set function
EnodeX  = union(SETNodeX2dof,union(SETNodeX4dof,SETNodeX10dof));
GGnodeX = zeros(size(EnodeX,2),4);
GGnodeX(:,1) = EnodeX';
GGnodeX(:,2) = enrich_node(EnodeX,1);
GGnodeX(:,3:4) = ls(EnodeX,:);
fid = fopen('GGnodeX','w');
fprintf(fid,'%d,%d,%g,%g\n',GGnodeX');
fclose(fid);


% GGelemX : essential information of enriched element
%           10 columns ,details refer to UEL
GGelemX = zeros(nelemX,10);
GGelemX(:,1) = TopX(:,1);
for i =1 : size(TopX,1)
    if  (ismember(TopX(i,1),split_elem))
        GGelemX(i,2) = 4;
    elseif  (ismember(TopX(i,1),tip_elem))
        GGelemX(i,2) = 40;
        GGelemX(i,9) = 1;
        GGelemX(i,10) = 2;
    else
        GGelemX(i,2) = -1;
    end
    corner = [TopX(i,2:5),TopX(i,2)];
    loop = 3;
    for j = 1 : 4
    n1 = corner(j);
    n2 = corner(j+1);
    if ( ls(n1,1)*ls(n2,1) < 0 )
        r    = ls(n1,1)/(ls(n1,1)-ls(n2,1));
        pnt  = (1-r)*node(corner(j),2:3)+r*node(corner(j),2:3);
        GGelemX(i,loop) = j;
        GGelemX(i,(loop*2-1):(loop*2)) = pnt;
        loop = loop+1;
    end
    end  
end

fid = fopen('GGelemX','w');
fprintf(fid,'%d,%d,%d,%d,%g,%g,%g,%g,%d,%d\n',GGelemX');
fclose(fid);


% TopXoverlay : overlay elements 
%      has encreased element number and share the same nodes as enriched element,
%      but have negligible stiffness
%      for plot only ,deformed and undeformed
TopXoverlay = TopX;
TopXoverlay(:,1) = TopX(:,1) +1000;
fid = fopen('TopXoverlay','w');
fprintf(fid,'%d,%d,%d,%d,%d\n',TopXoverlay');
fclose(fid);